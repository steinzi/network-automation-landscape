{"classification":{"category":{"name":"Python Eco-System","normalized_name":"python-eco-system","subcategories":[{"name":"Network Programmability Frameworks","normalized_name":"network-programmability-frameworks"},{"name":"Software Libraries","normalized_name":"software-libraries"}]}},"foundation":"Network Automation Landscape","items":[{"category":"Python Eco-System","id":"python-eco-system--network-programmability-frameworks--napalm-network-automation-and-programmability-abstraction-layer-with-multivendor-support","name":"NAPALM (Network Automation and Programmability Abstraction Layer with Multivendor support)","logo":"logos/b5d6fa5cf9656a14aafec774f5140ff953ccff6c66ff752d3b3daad12bd3dd33.png","subcategory":"Network Programmability Frameworks","website":"https://napalm.readthedocs.io","description":"NAPALM is a Python library that implements a set of functions to interact with different network device Operating Systems using a unified API.","maturity":"full-open-source","primary_repository_url":"https://github.com/napalm-automation/napalm"},{"category":"Python Eco-System","id":"python-eco-system--network-programmability-frameworks--nornir","name":"Nornir","logo":"logos/e908df5457a43da3a126861a09f17e707562e2f8e6ec34e4df9fcd407f6cad9d.jpg","subcategory":"Network Programmability Frameworks","website":"https://nornir.readthedocs.io","description":"Nornir is a pure Python automation framework that can be used for network automation tasks. It's designed to be fast, flexible, and easy to extend.","maturity":"full-open-source","primary_repository_url":"https://github.com/nornir-automation/nornir"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--scrapli","name":"Scrapli","logo":"logos/2581d6ae5b5fa55410e01b2c6e840772378f445d49abee87239efff564a4960f.svg","subcategory":"Software Libraries","website":"https://github.com/carlmontanari/scrapli","description":"Scrapli is a Python library focused on connecting to network devices (routers/switches/firewalls/etc.) via Telnet or SSH. It aims to be fast, flexible, and easy to use for both synchronous and asynchronous operations.","maturity":"full-open-source","primary_repository_url":"https://github.com/carlmontanari/scrapli"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--netmiko","name":"Netmiko","logo":"logos/90d56487f0bf9f7913eabc85d056cfada74e67a37af60dab723a5c3d0432e203.png","subcategory":"Software Libraries","website":"https://github.com/ktbyers/netmiko","description":"Netmiko is a multi-vendor library to simplify Paramiko SSH connections to network devices. It provides a unified API to connect to various network devices.","maturity":"full-open-source","primary_repository_url":"https://github.com/ktbyers/netmiko"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--pyez","name":"PyEZ","logo":"logos/10ac94ab168145a58a8803135215f9488f6256b90f21f437115e5e56c14c5b20.png","subcategory":"Software Libraries","website":"https://www.juniper.net/documentation/product/en_US/junos-pyez","description":"Juniper PyEZ is a Python library for managing and automating Juniper devices. It provides a Pythonic interface to the NETCONF API and other management interfaces.","maturity":"full-open-source","primary_repository_url":"https://github.com/Juniper/py-junos-eznc"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--pyeapi","name":"pyeapi","logo":"logos/dce872e7d3f3eebd69921896480078037be0229147a8018df21253b0f96b64f9.png","subcategory":"Software Libraries","website":"https://pyeapi.readthedocs.io/en/master/index.html","description":"The Python Client for eAPI (pyeapi) is a native Python library wrapper around Arista EOS eAPI.","maturity":"full-open-source","primary_repository_url":"https://github.com/arista-eosplus/pyeapi"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--ntc-templates","name":"NTC Templates","logo":"logos/b348f873e80cdd3157d816240ba3b440227fc47c3a4e204805f086689a4844ae.png","subcategory":"Software Libraries","website":"https://github.com/networktocode/ntc-templates","description":"Repository of TextFSM Templates for Network Devices, and Python wrapper for TextFSM's CliTable. TextFSM is a tool to help make parsing cli commands more manageable.","maturity":"full-open-source","primary_repository_url":"https://github.com/networktocode/ntc-templates"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--ttp","name":"TTP","logo":"logos/8306ad871551aa9ab6ac4fbf475571251ca442bb8dfa7a4073496f06a160e3f1.png","subcategory":"Software Libraries","website":"https://github.com/dmulyalin/ttp","description":"Template Text Parser is a Python library for semi-structured text parsing using templates.","maturity":"full-open-source","primary_repository_url":"https://github.com/dmulyalin/ttp"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--netutils","name":"netutils","logo":"logos/efb0abf7b23bc057396af85aea4637c0a4ef0ed31afe159e58a311c865735c5f.png","subcategory":"Software Libraries","website":"https://netutils.readthedocs.io/en/latest/","description":"Collection of functions that are used in the common network automation tasks.","maturity":"full-open-source","primary_repository_url":"https://github.com/networktocode/netutils"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--ncclient","name":"ncclient","logo":"logos/614426f2d90e234bbe4302ab8f1bd79748e1eecc08020846c51b985d1b052fb1.webp","subcategory":"Software Libraries","website":"https://ncclient.readthedocs.io/en/latest/","description":"ncclient is a Python library that facilitates client-side scripting and application development around the NETCONF protocol.","maturity":"full-open-source","primary_repository_url":"https://github.com/networktocode/netutils"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--diffsync","name":"DiffSync","logo":"logos/aace2c73b9323ac1ea4326e4bb08af42217f34f7d0784dd994eae913d3ff373d.png","subcategory":"Software Libraries","website":"https://diffsync.readthedocs.io/en/latest/index.html","description":"DiffSync is a utility library that can be used to compare and synchronize different datasets.","maturity":"full-open-source","primary_repository_url":"https://github.com/networktocode/diffsync"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--ncdiff","name":"ncdiff","logo":"logos/e4ba069e5dd443c224011a82ac94d3b0b5519cd73b8baf1824dc9365fb6bfb0a.png","subcategory":"Software Libraries","website":"https://diffsync.readthedocs.io/en/latest/index.html","description":"Extended ncclient NETCONF client with diff capabilities.","maturity":"full-open-source","primary_repository_url":"https://github.com/CiscoTestAutomation/ncdiff/"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--pygnmi","name":"pyGNMI","logo":"logos/0319da722a93eeaa145acb08be71853f99b7bcd271ca2c268c027d8ec014352f.png","subcategory":"Software Libraries","website":"https://github.com/akarneliuk/pygnmi/","description":"Python gNMI client","maturity":"full-open-source","primary_repository_url":"https://github.com/akarneliuk/pygnmi"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--pyangbind","name":"PyangBind","logo":"logos/8cb9e9e0a20bae74c015677adf6702bddb6a2c1a5bff667248ca96828cf2bd40.png","subcategory":"Software Libraries","website":"https://github.com/robshakir/pyangbind","description":"Pyang plugin to create Python bindings for a YANG model.","maturity":"full-open-source","primary_repository_url":"https://github.com/robshakir/pyangbind"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--pydantify","name":"pydantify","logo":"logos/0808d2249486f468265fa6d93a7443cef864617c1d02e194b36889ec78d48236.svg","subcategory":"Software Libraries","website":"https://pydantify.github.io/pydantify/","description":"Transform YANG models into Pydantic datastructures that can be initialized with config values and serialized.","maturity":"full-open-source","primary_repository_url":"https://github.com/pydantify/pydantify"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--pysros","name":"PySROS","logo":"logos/f956117532b0c7ae02a137adf94a7fc6f4c6cd99f7b8ddffa0f7750d76ce5ae7.png","subcategory":"Software Libraries","website":"https://network.developer.nokia.com/static/sr/learn/pysros/latest/index.html#","description":"The pySROS libraries provide a model-driven management interface for Python developers to integrate with supported Nokia routers running the Service Router Operating System (SR OS).","maturity":"full-open-source","primary_repository_url":"https://network.developer.nokia.com/static/sr/learn/pysros/latest/introduction.html#installation"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--hierarchical-configuration","name":"Hierarchical Configuration","logo":"logos/c55ce18fc6119d77d3e9861372fe4ac81573eec2b47acb95f4dfab493aa7a53f.svg","subcategory":"Software Libraries","website":"https://hier-config.readthedocs.io/en/latest/","description":"Query and compare network device configurations. Build remediation and rollback configs too.","maturity":"full-open-source","primary_repository_url":"https://github.com/netdevops/hier_config"},{"category":"Python Eco-System","id":"python-eco-system--software-libraries--avd","name":"AVD","logo":"logos/0db22a0d8a7c0338276422ef9ddb67dd94c541e5379c45aea710c812555f64ff.png","subcategory":"Software Libraries","website":"https://avd.arista.com","description":"AVD (Arista Validated Designs) is an Ansible collection that can be used also as a python standalone library (PyAVD) developed by Arista Networks. It provides a set of roles and modules to automate the deployment and management of Arista EOS-based network infrastructures.","maturity":"full-open-source","primary_repository_url":"https://github.com/aristanetworks/avd"}]}